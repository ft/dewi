#!@@POSIX_SH@@
# Copyright (c) 2010-2012
# Frank Terbeck <ft@bewatermyfriend.org>, All rights reserved.
# Terms for redistribution and use can be found in `LICENCE'.

n=dewi
op="$1"
[ $# -ge 1 ] && shift
ret=0
datadir="@@DATADIR@@"
parent=''
posix_sh="@@POSIX_SH@@"

dp() {
    format="$1"
    shift
    printf '%s: '"${format}" "$n" "$@"
}

__dot_dewi() {
    [ -d .dewi ] && return 0
    return 1
}

__mk_dot_dewi() {
    mkdir .dewi || return 1
    for dir in bin lib; do
        mkdir ".dewi/${dir}" || return 1
    done
    return 0
}

__cd_parent() {
    cd "${parent}" || return 1
    return 0
}

__cd_dot_dewi() {
    parent="${PWD:-..}"
    cd .dewi || return 1
    return 0
}

__copy_bin() {
    if [ ! -d bin ]; then
        dp '__copy_bin: No destination directory `bin'\'' found.\n'
        return 1
    fi
    for file in "${datadir}"/bin/*; do
        case "${file}" in
            *~) continue ;;
            *.in) continue ;;
        esac

        cp "${file}" bin || return 1
    done
    return 0
}

__copy_config() {
    cp "${datadir}/lib/config.mk" . || return 1
    cp "${datadir}/lib/config.perl" . || return 1
}

__copy_config_perl_compat() {
    if [ ! -e config.perl ]; then
        cp "${datadir}/lib/config.perl" . || return 1
    fi
    return 0
}

__copy_lib() {
    if [ ! -d lib ]; then
        dp '__copy_lib: No destination directory `lib'\'' found.\n'
        return 1
    fi
    for file in "${datadir}"/lib/*; do
        case "${file}" in
            *~) continue ;;
            *.in) continue ;;
            */config.mk) continue ;;
        esac

        cp "${file}" lib || return 1
    done
    return 0
}

__copy_mk_parent() {
    cp .dewi/lib/parent.mk Makefile || return 1
    return 0
}

__copy_mk_sub() {
    @@POSIX_SH@@ .dewi/bin/inall.sh update || return 1
    return 0
}

__dewi_init() {
    if __dot_dewi; then
        dp 'init: .dewi exist already. Did you mean `update'\''?\n'
        ret=1
        return
    fi
    __mk_dot_dewi &&
    __cd_dot_dewi &&
    __copy_lib &&
    __copy_bin &&
    __copy_config &&
    __cd_parent &&
    __copy_mk_parent
    ret="$?"
}

__dewi_update() {
    if ! __dot_dewi; then
        dp 'init: .dewi does not exist. Did you mean `init'\''?\n'
        ret=1
        return
    fi
    __cd_dot_dewi &&
    __copy_lib &&
    __copy_bin &&
    __copy_config_perl_compat &&
    __cd_parent &&
    __copy_mk_parent &&
    __copy_mk_sub
    return "$?"
}

__dewi_add() {
    "${posix_sh}" .dewi/bin/bootstrap.sh "$1"
}

__dewi_foreach() {
    @@POSIX_SH@@ .dewi/bin/inall.sh -run "$@"
    return $?
}

__realpath() {
    (cd "$1" && pwd)
}

basedir="$(pwd)"
realbasedir="${basedir}"
while [ "${realbasedir}" != '/' ]; do
    [ -d "${basedir}/.dewi" ] && break
    basedir=${basedir}/..
    realbasedir="$(__realpath "${basedir}")"
done
dewiroot="${realbasedir}"

case "$op" in
    add)
        if ! __dot_dewi; then
            dp 'add: .dewi does not exist. Not a dewi parent directory.\n'
            ret=1
            return
        fi
        if [ "$#" = 0 ]; then
            dp 'usage: dewi add <subdirectory>\n'
            ret=1
        elif [ "$#" = 1 ] && [ "$1" = '.' ]; then
            for dir in ./*; do
                [ ! -d "${dir}" ] && continue
                __dewi_add "${dir}"
            done
        else
            for dir in "$@"; do
                __dewi_add "${dir}"
            done
        fi
        ;;
    foreach)
        __dewi_foreach "$@"
        ret=$?
        ;;
    init)
        if [ "${dewiroot}" != '/' ]; then
            dp 'A parent (%s) has a `.dewi'\'' directory. Giving up.\n' "${dewiroot}"
        else
            __dewi_init
        fi
        ;;
    update)
        if [ "${dewiroot}" != '/' ] && [ "$(pwd)" != "${dewiroot}" ]; then
            dp 'A parent (%s) has a `.dewi'\'' directory.\n' "${dewiroot}"
            dp 'Assuming you wanted to run `update'\'' there.\n'
            cd "${dewiroot}" || exit 1
        fi
        __dewi_update
        ;;
    '')
        dp 'No operation specified.\n'
        ret=1
        ;;
    *)
        printf '%s'
        dp 'Unknown operation specified: `%s'\''\n' "$op"
        ret=1
        ;;
esac

exit "$ret"
